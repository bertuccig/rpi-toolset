#!/usr/bin/python

import os
import sys
from papirus import Papirus
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
from time import sleep
import RPi.GPIO as GPIO


user = os.getuid()
if user != 0:
    print "Please run script as root"
    sys.exit()

# Command line usage
# papirus-buttons

WHITE = 1
BLACK = 0

SIZE = 41

SW1 = 16
SW2 = 26
SW3 = 20
SW4 = 21

def main():
    GPIO.setmode(GPIO.BCM)

    GPIO.setup(SW1, GPIO.IN)
    GPIO.setup(SW2, GPIO.IN)
    GPIO.setup(SW3, GPIO.IN)
    GPIO.setup(SW4, GPIO.IN)

    papirus = Papirus()

    write_text(papirus, "Era meglio morire\n da piccoli\n con i peli del culo", SIZE)

    while True:
        if GPIO.input(SW1) == False:
            write_text(papirus, "One", SIZE)

        if GPIO.input(SW2) == False:
            draw_image(papirus, '/home/pi/nx.png', 'resize')
            # write_text(papirus, "Two", SIZE)

        if GPIO.input(SW3) == False:
            draw_image(papirus, '/home/pi/thumb.png', 'resize')
            # write_text(papirus, "Three", SIZE)

        if GPIO.input(SW4) == False:
            write_text(papirus, "Four", SIZE)

        sleep(0.1)

def write_text(papirus, text, size):

    # initially set all white background
    image = Image.new('1', papirus.size, WHITE)

    # prepare for drawing
    draw = ImageDraw.Draw(image)

    font = ImageFont.truetype('/home/pi/Pixel.ttf', size)
    # font = ImageFont.truetype('/usr/share/fonts/truetype/freefont/FreeMono.ttf', size)

    # Calculate the max number of char to fit on line
    line_size = (papirus.width / (size*0.65))

    current_line = 0
    text_lines = [""]

    # Compute each line
    for word in text.split():
        # If there is space on line add the word to it
        if (len(text_lines[current_line]) + len(word)) < line_size:
            text_lines[current_line] += " " + word
        else:
            # No space left on line so move to next one
            text_lines.append("")
            current_line += 1
            text_lines[current_line] += " " + word

    current_line = 0
    for l in text_lines:
        current_line += 1
        draw.text( (0, ((size*current_line)-size)) , l, font=font, fill=BLACK)

    papirus.display(image)
    papirus.update()


def draw_image(papirus, filepath, type):
    message = ""
    # padding for placing the image
    xpadding = 0
    ypadding = 0
    # open the image to display
    file = Image.open(filepath)
    # display with crop option
    if type == "crop":
        # Landscape image
        if file.size[0] > file.size[1]:
            wsize = int(float(papirus.size[1]) * float(float(file.size[0]) / float(file.size[1])))
            file.thumbnail((wsize, papirus.size[1]), Image.ANTIALIAS)
            # centering the image
            xpadding = int((papirus.size[0] - file.size[0]) / 2)
            message = "Landscape image cropped!"
        # Portrait image
        else:
            hsize = int(float(file.size[0]) * float(float(papirus.size[1]) / float(papirus.size[0])))
            file.thumbnail((papirus.size[0], hsize), Image.ANTIALIAS)
            # centering the image
            ypadding = int((papirus.size[1] - file.size[1]) / 2)
            message = "Portrait image cropped!"
    # display resize option
    else:
        # Landscape image
        if file.size[0] > file.size[1]:
            file.thumbnail(papirus.size, Image.ANTIALIAS)
            ypadding = int((papirus.size[1] - file.size[1]) / 2)
    # open the image to display
    file = Image.open(filepath)
    # display with crop option
    if type == "crop":
        # Landscape image
        if file.size[0] > file.size[1]:
            wsize = int(float(papirus.size[1]) * float(float(file.size[0]) / float(file.size[1])))
            file.thumbnail((wsize, papirus.size[1]), Image.ANTIALIAS)
            # centering the image
            xpadding = int((papirus.size[0] - file.size[0]) / 2)
            message = "Landscape image cropped!"
        # Portrait image
        else:
            hsize = int(float(file.size[0]) * float(float(papirus.size[1]) / float(papirus.size[0])))
            file.thumbnail((papirus.size[0], hsize), Image.ANTIALIAS)
            # centering the image
            ypadding = int((papirus.size[1] - file.size[1]) / 2)
            message = "Portrait image cropped!"
    # display resize option
    else:
        # Landscape image
        if file.size[0] > file.size[1]:
            file.thumbnail(papirus.size, Image.ANTIALIAS)
            ypadding = int((papirus.size[1] - file.size[1]) / 2)
            message = "Landscape image resized!"
        # Portrait image
        else:
            file.thumbnail(papirus.size, Image.ANTIALIAS)
            xpadding = int((papirus.size[0] - file.size[0]) / 2)
            message = "Portrait image resized!"
    # initially set all white background
    image = Image.new('1', papirus.size, 1)
    image.paste (file, (xpadding, ypadding))
    papirus.display(image)
    papirus.update()
    print(message)


if __name__ == '__main__':
    main()
